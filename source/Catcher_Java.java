/* autogenerated by Processing revision 1307 on 2025-10-05 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Catcher_Java extends PApplet {

int timeSeconds = 0;
int timeMinutes = 0;

boolean[] aus = new boolean[21];

boolean startGame = false;
boolean stateGame = false;
boolean pauseGame = false;
boolean resetGame = false;
boolean endGame = false;
boolean darkwhite = true;

border borderObject;
bonus bonusObject;
curse curseObject;
player playerObject;
balls ballsObject;
menu menuObject;

public void setup() {
  /* size commented out by preprocessor */;

  surface.setTitle("Catcher");
  surface.setResizable(true);

  /* smooth commented out by preprocessor */;

  menuObject = new menu();
  menuObject.setup();

  borderObject = new border();
  borderObject.setup();

  bonusObject = new bonus();
  bonusObject.setup();

  curseObject = new curse();
  curseObject.setup();

  ballsObject = new balls();
  ballsObject.setup();

  playerObject = new player();
  playerObject.setup();
}

public void draw() {
  if (goMenu) {
    menuObject.draw();
  }

    if (startGame && !pauseGame && !goMenu)
    {
      //int millis = millis();//

      background(backgr);
      noStroke();

      textSize(24);
      /*timeSeconds = millis / 1000;
      text(timeMinutes + " : " + timeSeconds, width / 2, height / 20);*/

      textSize(15);
      text(ceil(frameRate), width/20, height / 20); 

      borderObject.draw();

      if (goBonus) {
        bonusObject.draw();
      }
      if (goCurse) {
        curseObject.draw();
      }

      ballsObject.draw();

      playerObject.draw();
      
      debugpanel();
    }
   
  if (darkwhite == true) {
    fill = 255;
    backgr = 0;
  } else if (darkwhite == false) {
    fill = 0;
    backgr = 255;
  }
}

public void mouseClicked()
{
  if (mouseButton == CENTER)
  {
    startGame = !startGame;
    pauseGame = !pauseGame;
    textAlign(CENTER);
    textSize(30);
    fill(255);
    text("Press CMB or LMB to continue", width/2, height/2);
  }

  menuObject.mouseClicked();
}

public void keyTyped() {

  if (pauseGame && ballcount == 0) {

    if (key == ' ') {
      resetGame = !resetGame;
      if (resetGame) {
        resetGame();
      }
    }
  }
  if (key == 't' || key == 'T') {
    darkwhite = !darkwhite;
  }
}

public void keyPressed() {

  playerObject.keyPressed();
}

public void keyReleased() {

  playerObject.keyReleased();
}

public void resetGame() {
  startGame = true;
  pauseGame = false;

  /*timeSeconds = 0;
  timeMinutes = 0;*/

  goBonus = true;
  goCurse = true;

  borderObject.setup();
  bonusObject.setup();
  curseObject.setup();
  playerObject.setup();
  ballsObject.setup();
}

public void debugpanel() {
    println("-------------------");
    println("PlayerPos: (" + circleX + ", " + circleY + ")");
    println("CursePos: (" + curseX + ", " + curseY + ")");
    println("Curse speed: " + curseSp);
    println("Balls: " + ballcount);
    println("Bonus: " + goBonus);
    println("Curse: " + goCurse);
    println("-------------------");
}
float [] x = new float[21];
float [] y = new float[21];
float [] spX = new float[21];
float [] spY = new float[21];

float sz = 10;

int backgr = 0;

int fill = 255;

int[] col = new int[21];

int[] circlen = new int[21];

class balls {

  public void setup() {

    ellipseMode(CENTER);

    for (int i = 1; i < circlen.length; i++)
    {
      x[i] = random(constrain(( ((boxRight - boxMinHighlight) - sz / 2) - ((boxLeft + boxMinHighlight) + sz / 2)), (boxLeft + boxMinHighlight * 2) + sz, (boxRight - boxMinHighlight * 2) - sz));
      y[i] = random(constrain(( ((boxDown - boxMinHighlight) - sz / 2) - ((boxUp + boxMinHighlight) + sz/2)), (boxUp + boxMinHighlight * 2) + sz, (boxDown - boxMinHighlight * 2) - sz));

      aus[i] = true;
      col[i] = color(random(255), random(255), random(255));

      spX[i] = random(-5, 5);
      spY[i] = random(-5, 5);

      ballcount = i;
    }
  }

  public void draw()
  {
    noStroke();
    for (int i = 1; i < circlen.length; i++)
    {

      if (aus[i])
      {
        fill(col[i]);

        x[i] += spX[i];
        y[i] += spY[i];

        circle(x[i], y[i], sz);

        if (x[i] + sz / 2 >= boxRight - boxMinHighlight|| x[i] - sz / 2 <= boxLeft + boxMinHighlight)
        {
          spX[i] = -spX[i];
        }
        if (y[i] + sz / 2 >= boxDown - boxMinHighlight || y[i] - sz / 2 <= boxUp + boxMinHighlight)
        {
          spY[i] = -spY[i];
        }
      }
    }

    for (int i = 0; i < circlen.length; i++)
    {
      if (aus[i] && eat(circleX, circleY, circleD, x[i], y[i], sz))
      {
        aus[i] = false;
        if (!aus[i])
        {
          ballcount--;
          if (ballcount == 0)
          {
            goMenu = false;
            pauseGame = true;
            endGame = true;
            fill(fill);
            textSize(40);
            text("GameOver", width/2, height/3);
            textSize(30);
            text("Press SPACE to Restart", width/2, height/2);
          }
        }
      }
    }
  }
}
float bonusX = 0, bonusY = 0, bonusMinSize = 5, bonusMaxSize = 20;

float bonusCol = 0;

boolean goBonus = true;

class bonus
{
  boolean grow = true;

  public void setup()
  {
    bonusX = constrain(random(width), 0 + bonusMaxSize, width - bonusMaxSize);
    bonusY = constrain(random(height), 0 + bonusMaxSize, height - bonusMaxSize);

    bonusStatus = random(0, 2);
  }

  public void draw()
  {
    if (goBonus) {
      drawbonus();
      bonusEat();
    }
  }
  
  public void drawbonus() { 
    noStroke();
    fill(0, 255, 0);
    rectMode(CENTER);
    rect(bonusX, bonusY, bonusMinSize, bonusMinSize, 3);

    if (grow)
      {
        bonusMinSize += 0.2f;
      }
      if (bonusMinSize >= bonusMaxSize)
      {
        grow = false;
        bonusMinSize -= 0.2f;
      }
      if (bonusMinSize >= 5 && !grow)
      {
        bonusMinSize -= 0.2f;
      }
      if (bonusMinSize <= 5)
      {
        grow = true;
      }
      if (eatBonus(circleX, circleY, circleD, bonusX, bonusY, bonusMinSize))
      {
        goBonus = false;
      }
  }
  public void bonusEat() {
    if (eatBonus(circleX, circleY, circleD, bonusX, bonusY, bonusMinSize)){
      if (bonusStatus <= 1) {
        circleD = 80;
        counterTextSize = 28;
      } else if (bonusStatus <= 2) {
          circleSp = 8;
      }
    }
  }
}

float bonusStatus = 0;
public boolean menuMouse (float boxLeft, float boxRight, float boxUp, float boxDown)
{
  if (mouseX >= boxLeft &&
    mouseX <= boxRight - boxLeft &&
    mouseY >= boxUp &&
    mouseY <= boxDown - boxUp && !startGame)
  {
    return true;
  }
  return false;
}

public boolean startButton (float startButtonX, float startButtonY, float startButtonMinWidth, float startButtonMinHeight)
{
  if (mouseX >= startButtonX - startButtonMinWidth / 2 &&
    mouseX <= startButtonX + startButtonMinWidth / 2 &&
    mouseY >= startButtonY - startButtonMinHeight / 2 &&
    mouseY <= startButtonY + startButtonMinHeight / 2)
  {
    return true;
  }
  return false;
}

public boolean settingButton (float settingButtonX, float settingButtonY, float settingButtonMinWidth, float settingButtonMinHeight)
{
  if (mouseX >= settingButtonX - settingButtonMinWidth / 2 &&
    mouseX <= settingButtonX + settingButtonMinWidth / 2 &&
    mouseY >= settingButtonY - settingButtonMinHeight / 2 &&
    mouseY <= settingButtonY + settingButtonMinHeight / 2)
  {
    return true;
  }
  return false;
}

public boolean eat(float circleX, float circleY, float circleD, float x, float y, float sz)
{
  return circleX - circleD / 3 <= x + sz / 2 &&
    circleX + circleD / 3 >= x - sz / 2 &&
    circleY - circleD / 3 <= y + sz / 2 &&
    circleY + circleD / 3 >= y - sz / 2;
}

public boolean eatBonus(float circleX, float circleY, float circleD, float bonusX, float bonusY, float bonusMinSize)
{
  return circleX - circleD / 3 <= bonusX + bonusMinSize/ 2 &&
    circleX + circleD / 3 >= bonusX - bonusMinSize / 2 &&
    circleY - circleD / 3 <= bonusY + bonusMinSize / 2 &&
    circleY + circleD / 3 >= bonusY - bonusMinSize / 2;
}

public boolean eat–°urse(float circleX, float circleY, float circleD, float curseX, float curseY, float curseMinSize)
{
  return circleX - circleD / 3 <= curseX + curseMinSize/ 2 &&
    circleX + circleD / 3 >= curseX - curseMinSize / 2 &&
    circleY - circleD / 3 <= curseY + curseMinSize / 2 &&
    circleY + circleD / 3 >= curseY - curseMinSize / 2;
}

public boolean playerOutOfBorder(float circleX, float circleY, float circleD, float boxLeft, float boxRight, float boxUp, float boxDown)
{
  if (startGame && circleX - circleD / 2 <= boxLeft ||
    circleX + circleD / 2 >= boxLeft + boxRight ||
    circleY - circleD / 2 <= boxUp ||
    circleY + circleD / 2 >= boxUp + boxDown) {
    return true;
  } else {
    return false;
  }
}
float boxLeft = 0, boxUp = 0, boxDown = 0, boxRight = 0;

float boxMinHighlight = 4;

float boxMaxHighlight = 10;

class border {

  public void setup() {

    boxRight = width;
    boxDown = height;
  }

  public void draw() {

    boxRight = width;
    boxDown = height;

    rectMode(CORNERS);
    stroke(fill);
    strokeWeight(boxMinHighlight);
    noFill();
    rect(boxLeft + boxMinHighlight / 4, boxUp + boxMinHighlight / 4, boxRight - boxMinHighlight / 4, boxDown - boxMinHighlight / 4);

    if (boxMinHighlight <= boxMaxHighlight && playerOutOfBorder(circleX, circleY, circleD, boxLeft, boxRight, boxUp, boxDown))
    {
      boxMinHighlight += 0.2f;
    } else if (boxMinHighlight == boxMaxHighlight) {
      boxMinHighlight -= 0.2f;
    } else if (boxMinHighlight >= 4 && !playerOutOfBorder(circleX, circleY, circleD, boxLeft, boxRight, boxUp, boxDown)) {
      boxMinHighlight -= 0.2f;
    }
  }
}
float curseX = 0, curseY = 0, curseMinSize = 5, curseMaxSize = 20, curseSp = 0;

float curseCol = 0;

float dist = 0;

float curseStatus = 0;

boolean goCurse = true;

class curse
{
  boolean grow = true;

  public void setup() {
    curseX = constrain(random(width), 0 + curseMaxSize, width - curseMaxSize);
    curseY = constrain(random(height), 0 + curseMaxSize, height - curseMaxSize); 
    
    curseStatus = random(0, 3);
  }

  public void draw() {
    if (goCurse) {
      curseSp = circleSp * 0.5f;
      createcurse();
      playercinteract();
      curseEat();
      
    }
  }
  
  public void createcurse()
  {
      noStroke();
      fill(255, 0, 0);
      rectMode(CENTER);
      rect(curseX, curseY, curseMinSize, curseMinSize, 3);
      
      if (grow) {
        curseMinSize += 0.2f;
      }
      if (curseMinSize >= curseMaxSize) {
        grow = false;
        curseMinSize -= 0.2f;
      }
      if (curseMinSize >= 5 && !grow) {
        curseMinSize -= 0.2f;
      }
      if (curseMinSize <= 5) {
        grow = true;
      }
      if (eat–°urse(circleX, circleY, circleD, curseX, curseY, curseMinSize)) {
        goCurse = false;
      }
  }
  
  public void playercinteract()
  {
    if(startGame && !pauseGame && !goMenu) {
      
      float posX = circleX - curseX;
      float posY = circleY - curseY;
      
      dist = sqrt(sq(posX) + sq(posY));
      
      if (dist > 0){
        posX /= dist;
        posY /= dist;
        
        curseX += posX * curseSp;
        curseY += posY * curseSp;
      }
      else if(eatBonus(circleX, circleY, circleD, bonusX, bonusY, bonusMinSize) && circleSp == 8){
          curseSp = curseSp * 1.75f;
      }
    }
  }
  
  public void curseEat() 
  {
      if(eat–°urse(circleX, circleY, circleD, curseX, curseY, curseMinSize)){
        if (curseStatus <= 1) {
          circleD = 20;
          counterTextSize = 7;
        } else if (curseStatus <= 2) {
          circleSp = 2;
        } else if (curseStatus <= 3) {
          setup();
          goCurse = true;
          createcurse();
        }
      }
  }
}


class DebugPanel{
  
  int debugtextsize = 12;
  float debugoutline = 255;
  
  public void setup(){
  
  }
  
  public void draw(){
  
  }
}
float startButtonX = 0, startButtonY = 0,
  startButtonMinWidth = 0, startButtonMaxWidth = 0,
  startButtonMinHeight = 0, startButtonMaxHeight = 0;

float settingButtonX = 0, settingButtonY = 0,
  settingButtonMinWidth = 0, settingButtonMaxWidth = 0,
  settingButtonMinHeight = 0, settingButtonMaxHeight = 0;

float startTextMinSize, startTextMaxSize;

float settingTextMinSize, settingTextMaxSize;

boolean goMenu = true;

boolean goSettings = false;

class menu {

  public void setup() {

    /* size commented out by preprocessor */;
    background(backgr);
    fill(fill);

    rectMode(CENTER);

    boxRight = width;
    boxDown = height;

    startButtonX = width / 2;
    startButtonY = height / 3;

    startButtonMinWidth = 100;
    startButtonMinHeight = 60;

    startButtonMaxWidth = startButtonMinWidth * 2;
    startButtonMaxHeight = startButtonMinHeight + (startButtonMinHeight / 2);

    startTextMinSize = 24;
    startTextMaxSize = 36;

    settingButtonX = width / 2;
    settingButtonY = height / 2;

    settingButtonMinWidth = 100;
    settingButtonMinHeight = 60;

    settingButtonMaxWidth = settingButtonMinWidth * 2;
    settingButtonMaxHeight = settingButtonMinHeight + (settingButtonMinHeight / 2);

    settingTextMinSize = 24;
    settingTextMaxSize = 36;
  }

  public void draw() {
    if (goMenu) {
      background(backgr);
      if (menuMouse(boxLeft, boxRight, boxUp, boxDown)) {
        boxRight = width;
        boxDown = height;

        rectMode(CORNERS);
        stroke(fill);
        strokeWeight(boxMinHighlight);
        noFill();
        rect(boxLeft + boxMinHighlight / 4, boxUp + boxMinHighlight / 4, boxRight - boxMinHighlight / 4, boxDown - boxMinHighlight / 4);

        if (boxMinHighlight <= boxMaxHighlight && menuMouse(boxLeft, boxRight, boxUp, boxDown))
        {
          boxMinHighlight += 0.2f;
        } else if (boxMinHighlight == boxMaxHighlight) {
          boxMinHighlight -= 0.2f;
        } else if (boxMinHighlight >= 4 && !menuMouse(boxLeft, boxRight, boxUp, boxDown)) {
          boxMinHighlight -= 0.2f;
        }
      }
      textAlign(CENTER, CENTER);
      textSize(40);
      fill(fill);
      text("CATCH3R", width / 2, height / 5);

      rectMode(CENTER);
      strokeWeight(4);
      stroke(fill);
      noFill();
      rect(startButtonX, startButtonY, startButtonMinWidth, startButtonMinHeight, 2);

      textAlign(CENTER, CENTER);
      fill(fill);
      textSize(startTextMinSize);
      text("Start", startButtonX, startButtonY);

      if (startButtonMinWidth <= startButtonMaxWidth && startButtonMinHeight <= startButtonMaxHeight && startButton(startButtonX, startButtonY, startButtonMinWidth, startButtonMinHeight) && startTextMinSize <= startTextMaxSize) {
        startButtonMinWidth += 2;
        startButtonMinHeight += 1;
        startTextMinSize += 0.2f;
      } else if (startButtonMinWidth == startButtonMaxWidth && startButtonMinHeight == startButtonMaxHeight && startTextMinSize == startTextMaxSize) {
        startButtonMinWidth -= 2;
        startButtonMinHeight -= 1;
        startTextMinSize -= 0.2f;
      } else if (startButtonMinWidth >= 100 && startButtonMinHeight >= 60 && !startButton(startButtonX, startButtonY, startButtonMinWidth, startButtonMinHeight) && startTextMinSize >= 24) {
        startButtonMinWidth -= 2;
        startButtonMinHeight -= 1;
        startTextMinSize -= 0.2f;
      }

      noFill();
      rect(settingButtonX, settingButtonY, settingButtonMinWidth, settingButtonMinHeight, 2);

      textAlign(CENTER, CENTER);
      fill(fill);
      textSize(settingTextMinSize);
      text("Settings", settingButtonX, settingButtonY);

      if (settingButtonMinWidth <= settingButtonMaxWidth && settingButtonMinHeight <= settingButtonMaxHeight && settingButton(settingButtonX, settingButtonY, settingButtonMinWidth, settingButtonMinHeight) && settingTextMinSize <= settingTextMaxSize) {
        settingButtonMinWidth += 2;
        settingButtonMinHeight += 1;
        settingTextMinSize += 0.2f;
      } else if (settingButtonMinWidth == settingButtonMaxWidth && settingButtonMinHeight == settingButtonMaxHeight && settingTextMinSize == settingTextMaxSize) {
        settingButtonMinWidth += 2;
        settingButtonMinHeight += 1;
        settingTextMinSize -= 0.2f;
      } else if (settingButtonMinWidth >= 100 && settingButtonMinHeight >= 60 && !settingButton(settingButtonX, settingButtonY, settingButtonMinWidth, settingButtonMinHeight) && settingTextMinSize >= 24) {
        settingButtonMinWidth -= 2;
        settingButtonMinHeight -= 1;
        settingTextMinSize -= 0.2f;
      }
    }
  }

  public void mouseClicked() {

    if (startButton(startButtonX, startButtonY, startButtonMinWidth, startButtonMinHeight) && mouseButton == LEFT) {
      startGame = true;
      pauseGame = false;
      goMenu = false;
    }

/*    if (settingButton(settingButtonX, settingButtonY, settingButtonMinWidth, settingButtonMinHeight) && mouseButton == LEFT) {
      goMenu = false;
      goSettings = true;
    } */
  }
}
float circleX = 0, circleY = 0, circleD = 0, circleSp = 0;

float counterX = 0, counterY = 0, counterTextSize = 0;

int ballcount = 0;
 

boolean leftPressed = false;
boolean rightPressed = false;
boolean upPressed = false;
boolean downPressed = false;

class player
{

  public void setup() {
    circleX = width/2;
    circleY = height/2;
    circleD = 40;
    circleSp = 4;
    counterTextSize = 14;

    circleX = constrain(circleX, (boxLeft + boxMinHighlight / 2) + circleD / 2, (boxRight - boxMinHighlight / 2) - (circleD / 2));
    circleY = constrain(circleY, (boxUp + boxMinHighlight / 2) + circleD / 2, (boxDown - boxMinHighlight / 2) - (circleD / 2));

    counterX = circleX;
    counterY = circleY;
  }

  public void draw() {

    counterX = circleX;
    counterY = circleY;

    fill(fill);
    textSize(counterTextSize);
    strokeWeight(4);
    textAlign(CENTER, CENTER);
    text(ballcount, counterX, counterY);

    noFill();
    stroke(fill);
    strokeWeight(2);
    circle(circleX, circleY, circleD);

    if (leftPressed) {
      circleX -= circleSp;
      if (circleX <= boxLeft + boxMinHighlight / 2) {
        circleX = boxRight - boxMinHighlight / 2;
      }
    }
    if (rightPressed) {
      circleX += circleSp;
      if (circleX >= boxRight - boxMinHighlight / 2) {
        circleX = boxLeft + boxMinHighlight / 2;
      }
    }
    if (upPressed) {
      circleY -= circleSp;
      if (circleY <= boxUp + boxMinHighlight / 2) {
        circleY = boxDown  - boxMinHighlight / 2;
      }
    }
    if (downPressed) {
      circleY += circleSp;
      if (circleY >= boxDown - boxMinHighlight / 2) {
        circleY = boxUp + boxMinHighlight / 2;
      }
    }
  }

  public void keyPressed() {
    if (keyCode == LEFT || key == 'a' || key == 'A') {
      leftPressed = true;
    }
    if (keyCode == RIGHT || key == 'd' || key == 'D') {
      rightPressed = true;
    }
    if (keyCode == UP || key == 'w' || key == 'W') {
      upPressed = true;
    }
    if (keyCode == DOWN || key == 's' || key == 'S') {
      downPressed = true;
    }
  }

  public void keyReleased() {
    if (keyCode == LEFT || key == 'a' || key == 'A') {
      leftPressed = false;
    }
    if (keyCode == RIGHT || key == 'd' || key == 'D') {
      rightPressed = false;
    }
    if (keyCode == UP || key == 'w' || key == 'W') {
      upPressed = false;
    }
    if (keyCode == DOWN || key == 's' || key == 'S') {
      downPressed = false;
    }
  }
  
}


  public void settings() { size(400, 600);
smooth(10); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Catcher_Java" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
